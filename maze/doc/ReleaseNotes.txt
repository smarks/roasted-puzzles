This file contains implementation notes including stated assumptions about the solution.

While approaching this problem I struggled a bit with whether it was a
search a graph problem or a find the shortest path in a graph problem.

In short, "Do I have to find the optimal route or simply a valid route?"
But the puzzle requirements indicates that asking such questions was out of bounds.
I decided it was mostly a search the graph problem because the sample output
looked a bit like Breadth First Search algorithm:

ID  Room          Object collected
----------------------------------
2   Dining Room   None
1   Hallway       None
2   Dining Room   None
3   Kitchen       Knife
2   Dining Room   None
4   Sun Room      Potted Plant

But in the end, I decided it was a bit of both a search and find problem.
So, I actually solved the puzzle two ways.

Here is a rough outline of what the program is doing.

First, I read in the XML using the DTD to validate the XML.

I used a org.w3c.dom.Document and the supporting classes that are part of the JDK to do that.
I did have a slight preference for using JAXB for parsing of the XML because it would make
mapping the XML to Java classes more straight forward, but that would require creating a XSD from the DTD
and using it to validate the XML instead of the DTD. But after coding it up that way, I decided that approach was out
of bounds (because I am no longer using the DTD in the final solution) and stuck with
the 'older school' approach. Both approaches work fine.

Once the map.xml is in the org.w3c.dom.Document, I convert the org.w3c.dom.Nodes into a model that allows me to work
more easily with graph algorithms as well as provide the turn by turn functionality required in the final output.

When I am done iterating over the org.w3c.dom.Document, I have produced a HashMap whose key is the room id from the XML
and whose value is a RoomNode (Vertex). The RoomNode instance has all the attributes contained in the XML node. It contains
a list of its' adjacent rooms (annotated with the direction) as well as a list of Edge objects.

[ One possible optimization might be to use org.w3c.dom.Nodes directly
without the conversion, but I preferred to model the solution a bit more literally. Also, the model decouples the native
data types (the org.w3c.dom.Nodes) from how the data is being used in the program. This makes the code more modular.
It means if I wanted to go back an use a different parsing approach I would not be stuck having to change the
org.w3c.dom.Nodes everywhere they are used. I treat the org.w3c.dom.Nodes almost as DataTransferObject.
Also, I find the org.w3c.dom.Nodes API pretty cumbersome. All this lead me to do the conversion.
That said, if I had used the JAXB approach it would have been much easier to treat the JAXB classes as both DTOs and Graph Nodes.
If it wasn't for the DTD constraint, that might have been the most direct course for this particular problem.]

When I created the HashMap of rooms by id while parsing the XML, I could have easily also created a HashMap whose value
is the object in a room and whose key is the room. From there, I could use Dijkstra's Algorithm to find the shortest
path for each item (starting from where I found the previous item). However, generating this data while parsing the XML
felt a little like cheating to me. Instead, I created the same HashMap using a slightly modified Depth First Search approach.
This approach models the path an adventurer would take while exploring.

Once the location of the items are known, Dijkstra's Algorithm can be used to find the shortest path between each item.
However, that output does match the sample output and is not optimized to find any other items along the path,
just a particular one. So, to provide output that matches the sample provided, I modified the DSF approach to
backtrack (as a human would) and display the route they takes to navigate the graph until all the items are found.

Once I do that, I also show the shortest path to find each item, one item at a time by using Dijkstra Algorithm.


